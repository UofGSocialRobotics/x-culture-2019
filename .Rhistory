as.character(df$condition1),
as.character(df$condition2),
as.character(df$statement),
gest_num)
df$sig <- mapply(sig, df$p)
df$gest_name <- gest_name
df$statement <- gsub('\\Answer.', '', df$statement)
return(df)
}
## Playing with pairwise t test
# t1 <- get_vals(gest_1_condition_names[2], "Answer.tension", "1")
# t1 <- list.append(t1, list.sample(t1, size=4, replace=TRUE))
# t2 <- get_vals("original", "Answer.tension", "1")
# t.test(t1, t2, paired = TRUE)
# t.test(t1, t2, paired=FALSE)
# pairwise.t.test(t1, t2)
gest_1_sig_table <- make_table_per_gesture("unpolite", gest_1_condition_names[1], gest_1_condition_names[2], "1")
gest_2_sig_table <- make_table_per_gesture("entity", gest_2_condition_names[1], gest_2_condition_names[2], "2")
gest_3_sig_table <- make_table_per_gesture("audience", gest_3_condition_names[1], gest_3_condition_names[2], "3")
gest_4_sig_table <- make_table_per_gesture("anything", gest_4_condition_names[1], gest_4_condition_names[2], "4")
gest_5_sig_table <- make_table_per_gesture("specific", gest_5_condition_names[1], gest_5_condition_names[2], "5")
all_sig_vals <- rbind(gest_1_sig_table, gest_2_sig_table, gest_3_sig_table, gest_4_sig_table, gest_5_sig_table) %>%
filter(grepl("\\*", sig))
png("sig_vals.png", height = 50*nrow(all_sig_vals), width = 200*ncol(all_sig_vals))
grid.table(all_sig_vals)
dev.off()
test_plot <- ggplot(test_d, aes(condition, score)) +
geom_violin(aes(fill=condition, alpha=0.5), scale="area", draw_quantiles = c(0.25, 0.5, 0.75)) +
facet_wrap(~statement_measure) +
labs(
title = "Violin plot (density) of response scores per condition by statement",
caption = "Horizontal lines are drawn at the 0.25, 0.5, and 0.75 quantiles of the distribution."
) +
theme(
legend.key.size = unit(1.5, "cm"),
legend.key.width = unit(0.5,"cm")
)
ggsave("unpolite_violin_tens_work.png", plot=test_plot)
test_plot <- ggplot(test_d, aes(condition, score)) +
geom_violin(aes(fill=condition, alpha=0.5), scale="area", draw_quantiles = c(0.25, 0.5, 0.75)) +
facet_wrap(~statement_measure) +
labs(
title = "Violin plot (density) of response scores per condition by statement",
caption = "Horizontal lines are drawn at the 0.25, 0.5, and 0.75 quantiles of the distribution."
) +
theme(
legend.key.size = unit(1.5, "cm"),
legend.key.width = unit(0.5,"cm"),
legend.text = element_text(size = 10)
)
ggsave("unpolite_violin_tens_work.png", plot=test_plot)
test_plot <- ggplot(test_d, aes(condition, score)) +
geom_violin(aes(fill=condition, alpha=0.5), scale="area", draw_quantiles = c(0.25, 0.5, 0.75)) +
facet_wrap(~statement_measure) +
labs(
title = "Violin plot (density) of response scores per condition by statement",
caption = "Horizontal lines are drawn at the 0.25, 0.5, and 0.75 quantiles of the distribution."
) +
scale_fill_discrete(name = "Gesture Condition", labels = c("Collide", "Original", "Intertwine"))
theme(
legend.key.size = unit(1.5, "cm"),
legend.key.width = unit(0.5,"cm"),
legend.text = element_text(size = 10)
)
test_plot <- ggplot(test_d, aes(condition, score)) +
geom_violin(aes(fill=condition, alpha=0.5), scale="area", draw_quantiles = c(0.25, 0.5, 0.75)) +
facet_wrap(~statement_measure) +
labs(
title = "Violin plot (density) of response scores per condition by statement",
caption = "Horizontal lines are drawn at the 0.25, 0.5, and 0.75 quantiles of the distribution."
) +
scale_fill_discrete(name = "Gesture Condition", labels = c("Collide", "Original", "Intertwine")) +
theme(
legend.key.size = unit(1.5, "cm"),
legend.key.width = unit(0.5,"cm"),
legend.text = element_text(size = 10)
)
ggsave("unpolite_violin_tens_work.png", plot=test_plot)
test_plot <- ggplot(test_d, aes(condition, score)) +
geom_violin(aes(fill=condition, alpha=0.5), scale="area", draw_quantiles = c(0.25, 0.5, 0.75)) +
facet_wrap(~statement_measure) +
labs(
title = "Violin plot (density) of response scores per condition by statement",
caption = "Horizontal lines are drawn at the 0.25, 0.5, and 0.75 quantiles of the distribution."
) +
scale_fill_discrete(name = "Gesture Condition", labels = c("Collide", "Original", "Intertwine")) +
theme(
legend.key.size = unit(1.5, "cm"),
legend.key.width = unit(0.5,"cm"),
legend.text = element_text(size = 10)
) +
guides(
alpha = guide_legend(show.legend=FALSE),
)
test_plot <- ggplot(test_d, aes(condition, score)) +
geom_violin(aes(fill=condition, alpha=0.5), scale="area", draw_quantiles = c(0.25, 0.5, 0.75)) +
facet_wrap(~statement_measure) +
labs(
title = "Violin plot (density) of response scores per condition by statement",
caption = "Horizontal lines are drawn at the 0.25, 0.5, and 0.75 quantiles of the distribution."
) +
scale_fill_discrete(name = "Gesture Condition", labels = c("Collide", "Original", "Intertwine")) +
theme(
legend.key.size = unit(1.5, "cm"),
legend.key.width = unit(0.5,"cm"),
legend.text = element_text(size = 10)
) +
scale_alpha_manual(guide=NONE)
test_plot <- ggplot(test_d, aes(condition, score)) +
geom_violin(aes(fill=condition, alpha=0.5), scale="area", draw_quantiles = c(0.25, 0.5, 0.75)) +
facet_wrap(~statement_measure) +
labs(
title = "Violin plot (density) of response scores per condition by statement",
caption = "Horizontal lines are drawn at the 0.25, 0.5, and 0.75 quantiles of the distribution."
) +
scale_fill_discrete(name = "Gesture Condition", labels = c("Collide", "Original", "Intertwine")) +
theme(
legend.key.size = unit(1.5, "cm"),
legend.key.width = unit(0.5,"cm"),
legend.text = element_text(size = 10)
) +
scale_alpha_manual(guide="none")
ggsave("unpolite_violin_tens_work.png", plot=test_plot)
test_plot <- ggplot(test_d, aes(condition, score)) +
geom_violin(aes(fill=condition, alpha=0.5), scale="area", draw_quantiles = c(0.25, 0.5, 0.75)) +
facet_wrap(~statement_measure) +
labs(
title = "Violin plot (density) of response scores per condition by statement",
caption = "Horizontal lines are drawn at the 0.25, 0.5, and 0.75 quantiles of the distribution."
) +
scale_fill_discrete(name = "Gesture Condition", labels = c("Collide", "Original", "Intertwine")) +
theme(
legend.key.size = unit(1.5, "cm"),
legend.key.width = unit(0.5,"cm"),
legend.text = element_text(size = 10)
)
ggsave("unpolite_violin_tens_work.png", plot=test_plot)
test_plot <- make_density_plot(test_d_1, test_d_3, test_d_2) +
labs(
title = "Density of rankings per condition by statement",
xlab = "Unpolite Gesture Ranking Data",
ylab = "Response Density"
) +
scale_fill_discrete(name = "Gesture Condition", labels = c("Collide", "Original", "Intertwine")) +
theme(
legend.key.size = unit(1.5, "cm"),
legend.key.width = unit(0.5,"cm"),
legend.text = element_text(size = 10)
)
test_plot <- make_density_plot(test_d_1, test_d_3, test_d_2) +
labs(
title = "Density of rankings per condition by statement",
xlab = "Unpolite Gesture Ranking Data",
ylab = "Response Density"
)
unpolite_density <- make_density_plot(uo, uf, ut)
unpolite_density_scaled <- make_density_plot_scaled(uo, uf, ut)
unpolite_density
test_d_1 <- rbind(filter(uo, metaphor_measure == "Tension"),
filter(uo, metaphor_measure == "WorkTogether"))
test_d_2 <- rbind(filter(ut, metaphor_measure == "Tension"),
filter(ut, metaphor_measure == "WorkTogether"))
test_d_3 <- rbind(filter(uf, metaphor_measure == "Tension"),
filter(uf, metaphor_measure == "WorkTogether"))
test_plot <- make_density_plot(test_d_1, test_d_3, test_d_2) +
labs(
title = "Density of rankings per condition by statement",
xlab = "Unpolite Gesture Ranking Data",
ylab = "Response Density"
)
ggsave("unpolite_dense_tens_work.png", plot=test_plot)
test_plot <- make_density_plot(test_d_1, test_d_3, test_d_2) +
labs(
title = "Density of rankings per condition by statement",
xlab = "Unpolite Gesture Ranking Data",
ylab = "Response Density"
) +
scale_fill_discrete(name = "Gesture Condition", labels = c("Collide", "Original", "Intertwine")) +
theme(
legend.key.size = unit(1.5, "cm"),
legend.key.width = unit(0.5,"cm"),
legend.text = element_text(size = 10)
)
ggsave("unpolite_dense_tens_work.png", plot=test_plot)
test_plot <- make_density_plot(test_d_1, test_d_3, test_d_2) +
labs(
title = "Density of rankings per condition by statement",
xlab = "Unpolite Gesture Ranking Data",
ylab = "Response Density"
) +
scale_fill_discrete(name = "Gesture Condition", labels = c("Collide", "Intertwine", "Original")) +
theme(
legend.key.size = unit(1.5, "cm"),
legend.key.width = unit(0.5,"cm"),
legend.text = element_text(size = 10)
)
ggsave("unpolite_dense_tens_work.png", plot=test_plot)
View(aaop)
test_a_1 <- rbind(filter(aao, metaphor_measure == "Tension"),
filter(aao, metaphor_measure == "WorkTogether"))
test_a_2 <- rbind(filter(aas, metaphor_measure == "Tension"),
filter(aas, metaphor_measure == "WorkTogether"))
test_a_3 <- rbind(filter(aaop, metaphor_measure == "Tension"),
filter(aaop, metaphor_measure == "WorkTogether"))
audience_test_plot <- make_density_plot(test_a_1, test_a_3, test_a_2) +
labs(
title = "Density of rankings per condition by statement",
xlab = "Unpolite Gesture Ranking Data",
ylab = "Response Density"
) +
theme(
legend.key.size = unit(1.5, "cm"),
legend.key.width = unit(0.5,"cm"),
legend.text = element_text(size = 10)
)
ggsave("unpolite_dense_tens_work.png", plot=test_plot)
ggsave("unpolite_dense_tens_work.png", plot=test_plot)
audience_test_plot <- make_density_plot(test_a_1, test_a_3, test_a_2) +
labs(
title = "Density of rankings per condition by statement",
xlab = "Unpolite Gesture Ranking Data",
ylab = "Response Density"
) +
theme(
legend.key.size = unit(1.5, "cm"),
legend.key.width = unit(0.5,"cm"),
legend.text = element_text(size = 10)
)
ggsave("audience_dense_tens_work.png", plot=audience_test_plot)
test_a_1 <- rbind(filter(aao, metaphor_measure == "Tension"),
filter(aao, metaphor_measure == "WorkTogether"))
test_a_2 <- rbind(filter(aas, metaphor_measure == "Tension"),
filter(aas, metaphor_measure == "WorkTogether"))
test_a_3 <- rbind(filter(aaop, metaphor_measure == "Tension"),
filter(aaop, metaphor_measure == "WorkTogether"))
audience_test_plot <- make_density_plot(test_a_1, test_a_3, test_a_2) +
labs(
title = "Density of rankings per condition by statement",
xlab = "Unpolite Gesture Ranking Data",
ylab = "Response Density"
) +
scale_fill_discrete(name = "Gesture Condition", labels = c("Palm up", "Original", "No circle")) +
theme(
legend.key.size = unit(1.5, "cm"),
legend.key.width = unit(0.5,"cm"),
legend.text = element_text(size = 10)
)
ggsave("audience_dense_tens_work.png", plot=audience_test_plot)
?summarise
## order by mean
order_test <- all_sig_vals %>%
summarise(score=mean(score))
## order by mean
order_test <- west_gest_1_clean %>%
summarise(score=mean(score))
View(order_test)
print(xtable(all_sig_vals, type = "latex"), file = "sig_vals_ordered.tex")
install.packages("xtable")
print(xtable(all_sig_vals, type = "latex"), file = "sig_vals_ordered.tex")
library(xtable)
print(xtable(all_sig_vals, type = "latex"), file = "sig_vals_ordered.tex")
m <- west_gest_1_clean %>%
filter(condition=="original") %>%
filter(statement_measure=="Answer.buttheads")
m
m <- west_gest_1_clean %>%
filter(condition=="original") %>%
filter(statement_measure=="Answer.buttheads")
mean(m$score)
m <- west_gest_1_clean %>%
filter(condition=="collide") %>%
filter(statement_measure=="Answer.buttheads")
m <- west_gest_1_clean %>%
filter(condition=="collide") %>%
filter(statement_measure=="Answer.buttheads")
mean(m$score)
m <- west_gest_1_clean %>%
filter(condition=="together") %>%
filter(statement_measure=="Answer.buttheads")
mean(m$score)
m <- west_gest_1_clean %>%
filter(condition=="original") %>%
filter(statement_measure=="Answer.buttheads")
mean(m$score)
m <- west_gest_1_clean %>%
filter(condition=="original") %>%
filter(statement_measure=="Answer.disagreement")
mean(m$score)
m <- west_gest_1_clean %>%
filter(condition=="original") %>%
filter(statement_measure=="Answer.disagreement")
mean(m$score)
m <- west_gest_1_clean %>%
filter(condition=="collide") %>%
filter(statement_measure=="Answer.disagreement")
mean(m$score)
m <- west_gest_2_clean %>%
filter(condition=="original") %>%
filter(statement_measure=="Answer.buttheads")
mean(m$score)
m <- west_gest_2_clean %>%
filter(condition=="separated") %>%
filter(statement_measure=="Answer.buttheads")
mean(m$score)
m <- west_gest_2_clean %>%
filter(condition=="chest") %>%
filter(statement_measure=="Answer.disagreement")
mean(m$score)
m <- west_gest_2_clean %>%
filter(condition=="original") %>%
filter(statement_measure=="Answer.disagreement")
mean(m$score)
m <- west_gest_3_clean %>%
filter(condition=="original") %>%
filter(statement_measure=="Answer.buttheads")
mean(m$score)
m <- west_gest_3_clean %>%
filter(condition=="no_circle") %>%
filter(statement_measure=="Answer.buttheads")
mean(m$score)
m <- west_gest_3_clean %>%
filter(condition=="palm_up") %>%
filter(statement_measure=="Answer.buttheads")
mean(m$score)
m <- west_gest_3_clean %>%
filter(condition=="palm_up") %>%
filter(statement_measure=="Answer.close")
mean(m$score)
m <- west_gest_3_clean %>%
filter(condition=="no_circle") %>%
filter(statement_measure=="Answer.close")
mean(m$score)
m <- west_gest_3_clean %>%
filter(condition=="no_circle") %>%
filter(statement_measure=="Answer.goal")
mean(m$score)
m <- west_gest_3_clean %>%
filter(condition=="palm_up") %>%
filter(statement_measure=="Answer.goal")
mean(m$score)
m <- west_gest_3_clean %>%
filter(condition=="palm_up") %>%
filter(statement_measure=="Answer.tension")
mean(m$score)
m <- west_gest_3_clean %>%
filter(condition=="no_circle") %>%
filter(statement_measure=="Answer.tension")
mean(m$score)
m <- west_gest_3_clean %>%
filter(condition=="original") %>%
filter(statement_measure=="Answer.tension")
mean(m$score)
m <- west_gest_4_clean %>%
filter(condition=="original") %>%
filter(statement_measure=="Answer.protected")
mean(m$score)
m <- west_gest_4_clean %>%
filter(condition=="frame") %>%
filter(statement_measure=="Answer.protected")
mean(m$score)
m <- west_gest_4_clean %>%
filter(condition=="frame") %>%
filter(statement_measure=="Answer.worktogether")
mean(m$score)
m <- west_gest_4_clean %>%
filter(condition=="cover") %>%
filter(statement_measure=="Answer.worktogether")
mean(m$score)
m <- west_gest_4_clean %>%
filter(condition=="original") %>%
filter(statement_measure=="Answer.worktogether")
mean(m$score)
test_d_1 <- west_gest_1_clean %>%
filter(statement_measure == "Answer.tension")
test_d_2 <- west_gest_1_clean %>%
filter(statement_measure == "Answer.worktogether")
test_d <- rbind(test_d_1, test_d_2)
test_plot <- ggplot(test_d, aes(condition, score)) +
geom_violin(aes(fill=condition, alpha=0.5), scale="area", draw_quantiles = c(0.25, 0.5, 0.75)) +
facet_wrap(~statement_measure) +
scale_fill_discrete(name = "Gesture Condition", labels = c("Collide", "Original", "Intertwine")) +
theme(
legend.key.size = unit(1.5, "cm"),
legend.key.width = unit(0.5,"cm"),
legend.text = element_text(size = 10)
)
ggsave("unpolite_violin_tens_work.png", plot=test_plot)
test_d_1 <- rbind(filter(uo, metaphor_measure == "Tension"),
filter(uo, metaphor_measure == "WorkTogether"))
test_d_2 <- rbind(filter(ut, metaphor_measure == "Tension"),
filter(ut, metaphor_measure == "WorkTogether"))
test_d_3 <- rbind(filter(uf, metaphor_measure == "Tension"),
filter(uf, metaphor_measure == "WorkTogether"))
test_plot <- make_density_plot(test_d_1, test_d_3, test_d_2) +
scale_fill_discrete(name = "Gesture Condition", labels = c("Collide", "Intertwine", "Original")) +
theme(
legend.key.size = unit(1.5, "cm"),
legend.key.width = unit(0.5,"cm"),
legend.text = element_text(size = 10)
)
ggsave("unpolite_dense_tens_work.png", plot=test_plot)
setwd("~/glasgow/social-lab/IVA2019-data-and-examples")
setwd("~/glasgow/social-lab/x-cultre-2019")
setwd("~/glasgow/social-lab/IVA2019-data-and-examples")
setwd("~/glasgow/social-lab/x-cultre-2019")
statement1 <- west_gest_1_clean %>%
filter(statement="Answer.buttheads")
statement1 <- west_gest_1_clean %>%
filter(statement=="Answer.buttheads")
statement1 <- west_gest_1_clean %>%
filter(statement_measure=="Answer.buttheads")
statement1 <- west_gest_1_clean %>%
filter(statement_measure=="Answer.buttheads")
View(statement1)
library("ggpubr")
ggboxplot(statement1, x = "group", y = "weight",
color = "group", palette = c("#00AFBB", "#E7B800", "#FC4E07"),
order = c("ctrl", "trt1", "trt2"),
ylab = "Weight", xlab = "Treatment")
ggboxplot(statement1, x = "group", y = "weight",
color = "group", palette = c("#00AFBB", "#E7B800", "#FC4E07"),
order = c("original", "intertwine", "collide"),
ylab = "Weight", xlab = "Treatment")
ggboxplot(statement1, x = "condition", y = "score",
color = "group", palette = c("#00AFBB", "#E7B800", "#FC4E07"),
order = c("original", "intertwine", "collide"),
ylab = "Weight", xlab = "Treatment")
ggboxplot(statement1, x = "condition", y = "score",
color = "condition", palette = c("#00AFBB", "#E7B800", "#FC4E07"),
order = c("original", "intertwine", "collide"),
ylab = "Weight", xlab = "Treatment")
ggboxplot(statement1, x = "condition", y = "score",
color = "condition", palette = c("#00AFBB", "#E7B800", "#FC4E07"),
order = c("original", "together", "collide"),
ylab = "Weight", xlab = "Treatment")
res.aov <- aov(score ~ condition, data = statement_1)
res.aov <- aov(score ~ condition, data = statement1)
summary(res.aov)
TukeyHSD(res.aov)
pairwise.t.test(statement1$score, statement1$condition,
p.adjust.method = "BH")
plot(res.aov, 1)
plot(res.aov, 2)
TukeyHSD(res.aov)
do_anova_per_statement <- function(data, statement) {
statement_data <- data %>%
filter(statement_measure==statement)
res.aov <- aov(score ~ condition, data=statement_data)
return(res.aov)
}
w1 <- do_anova_per_statement(west_gest_1_clean, "Answer.buttheads")
summary(w1)
pairwise.t.test(s1$score, s1$condition,
p.adjust.method = "BH")
w1 <- do_anova_per_statement(west_gest_1_clean, "Answer.buttheads")
w1 <- do_anova_per_statement(west_gest_1_clean, "Answer.buttheads")
summary(w1)
pairwise.t.test(w1$score, w1$condition,
p.adjust.method = "BH")
w1 <- do_anova_per_statement(west_gest_1_clean, "Answer.buttheads")
summary(w1)
do_anova_per_data <- function(data) {
statements <- c("Answer.buttheads", "Answer.close", "Answer.cometogether", "Answer.communicate",
"Answer.control", "Answer.disagreement", "Answer.getalong", "Answer.goal",
"Answer.overlap", "Answer.protected", "Answer.tension", "Answer.unified",
"Answer.worktogether")
for (s in statements) {
do_anova_per_statement(data, s)
}
}
do_anova_per_data(west_gest_1_clean)
do_anova_per_data <- function(data) {
statements <- c("Answer.buttheads", "Answer.close", "Answer.cometogether", "Answer.communicate",
"Answer.control", "Answer.disagreement", "Answer.getalong", "Answer.goal",
"Answer.overlap", "Answer.protected", "Answer.tension", "Answer.unified",
"Answer.worktogether")
for (s in statements) {
print(s)
do_anova_per_statement(data, s)
}
}
do_anova_per_data(west_gest_1_clean)
do_anova_per_data <- function(data) {
statements <- c("Answer.buttheads", "Answer.close", "Answer.cometogether", "Answer.communicate",
"Answer.control", "Answer.disagreement", "Answer.getalong", "Answer.goal",
"Answer.overlap", "Answer.protected", "Answer.tension", "Answer.unified",
"Answer.worktogether")
for (s in statements) {
print(s)
a <- do_anova_per_statement(data, s)
print(summary(a))
}
}
do_anova_per_data(west_gest_1_clean)
do_anova_per_data(west_gest_2_clean)
do_anova_per_data(west_gest_3_clean)
do_anova_per_data(west_gest_3_clean)
do_anova_per_data <- function(data) {
statements <- c("Answer.buttheads", "Answer.close", "Answer.cometogether", "Answer.communicate",
"Answer.control", "Answer.disagreement", "Answer.getalong", "Answer.goal",
"Answer.overlap", "Answer.protected", "Answer.tension", "Answer.unified",
"Answer.worktogether")
for (s in statements) {
print(s)
a <- do_anova_per_statement(data, s)
print(summary(a))
print("========================")
}
}
do_anova_per_data(west_gest_3_clean)
do_anova_per_data(west_gest_4_clean)
do_anova_per_data(west_gest_5_clean)
